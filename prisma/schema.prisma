generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                   String        @id @default(cuid())
  name                 String        @db.Text
  email                String        @db.Text @unique
  emailVerified        DateTime?
  password             String?
  image                String?
  status               UserStatus
  gymSessions          GymSession[]
  accounts             Account[]
  sessions             Session[]
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
}

enum UserStatus {
  Unknown
  Active
  InActive
  Deleted
}

model Account {
  id                   String        @id @default(cuid())
  userId               String
  type                 String        @db.Text
  provider             String        @db.Text
  providerAccountId    String        @db.Text
  refresh_token        String?       @db.Text
  access_token         String?       @db.Text
  expires_at           Int?
  token_type           String?       @db.Text
  scope                String?       @db.Text
  id_token             String?       @db.Text
  session_state        String?       @db.Text
  user                 User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id                   String        @id @default(cuid())
  sessionToken         String        @unique
  userId               String
  expires              DateTime
  user                 User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model GymSession {
  id                   String        @id @default(cuid())
  userId               String
  user                 User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  gymSessionExercises  GymSessionExercise[]
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
}

model Exercise {
  id                   String        @id @default(cuid())
  name                 String
  gymSessionExercises  GymSessionExercise[]
  exerciseFocusAreas   ExerciseFocusArea[]
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
}

model GymSessionExercise {
  id                   String                @id @default(cuid())
  gymSessionId         String
  exerciseId           String
  gymSession           GymSession            @relation(fields: [gymSessionId], references: [id], onDelete: Cascade)
  exercise             Exercise              @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  gymSessionExerciseSets GymSessionExerciseSet[]
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
}

model FocusArea {
  id                   String                @id @default(cuid())
  name                 String
  muscleGroup          String
  exerciseFocusAreas   ExerciseFocusArea[]
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
}

model ExerciseFocusArea {
  id                   String                @id @default(cuid())
  exerciseId           String
  focusAreaId          String
  exercise             Exercise              @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  focusArea            FocusArea             @relation(fields: [focusAreaId], references: [id], onDelete: Cascade)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
}

model GymSessionExerciseSet {
  id                   String                @id @default(cuid())
  gymSessionExerciseId String
  roundCount           Int
  weight               BigInt
  weightUnitId         String
  gymSessionExercise   GymSessionExercise    @relation(fields: [gymSessionExerciseId], references: [id], onDelete: Cascade)
  weightUnit           WeightUnit            @relation(fields: [weightUnitId], references: [id])
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
}

model WeightUnit {
  id                   String                @id @default(cuid())
  name                 String
  gymSessionExerciseSets GymSessionExerciseSet[]
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
}
